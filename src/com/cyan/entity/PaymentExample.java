package com.cyan.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class PaymentExample {
    /**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	protected String orderByClause;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	protected boolean distinct;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	public PaymentExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	public void setDistinct(boolean distinct) {
		this.distinct = distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	public boolean isDistinct() {
		return distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	public Criteria or() {
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	public void clear() {
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	protected abstract static class GeneratedCriteria {
		protected List<Criterion> criteria;

		protected GeneratedCriteria() {
			super();
			criteria = new ArrayList<Criterion>();
		}

		public boolean isValid() {
			return criteria.size() > 0;
		}

		public List<Criterion> getAllCriteria() {
			return criteria;
		}

		public List<Criterion> getCriteria() {
			return criteria;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteria.add(new Criterion(condition));
		}

		protected void addCriterion(String condition, Object value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value));
		}

		protected void addCriterion(String condition, Object value1, Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value1, value2));
		}

		protected void addCriterionForJDBCDate(String condition, Date value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value.getTime()), property);
		}

		protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property + " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andPaymentIdIsNull() {
			addCriterion("payment_id is null");
			return (Criteria) this;
		}

		public Criteria andPaymentIdIsNotNull() {
			addCriterion("payment_id is not null");
			return (Criteria) this;
		}

		public Criteria andPaymentIdEqualTo(Integer value) {
			addCriterion("payment_id =", value, "paymentId");
			return (Criteria) this;
		}

		public Criteria andPaymentIdNotEqualTo(Integer value) {
			addCriterion("payment_id <>", value, "paymentId");
			return (Criteria) this;
		}

		public Criteria andPaymentIdGreaterThan(Integer value) {
			addCriterion("payment_id >", value, "paymentId");
			return (Criteria) this;
		}

		public Criteria andPaymentIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("payment_id >=", value, "paymentId");
			return (Criteria) this;
		}

		public Criteria andPaymentIdLessThan(Integer value) {
			addCriterion("payment_id <", value, "paymentId");
			return (Criteria) this;
		}

		public Criteria andPaymentIdLessThanOrEqualTo(Integer value) {
			addCriterion("payment_id <=", value, "paymentId");
			return (Criteria) this;
		}

		public Criteria andPaymentIdIn(List<Integer> values) {
			addCriterion("payment_id in", values, "paymentId");
			return (Criteria) this;
		}

		public Criteria andPaymentIdNotIn(List<Integer> values) {
			addCriterion("payment_id not in", values, "paymentId");
			return (Criteria) this;
		}

		public Criteria andPaymentIdBetween(Integer value1, Integer value2) {
			addCriterion("payment_id between", value1, value2, "paymentId");
			return (Criteria) this;
		}

		public Criteria andPaymentIdNotBetween(Integer value1, Integer value2) {
			addCriterion("payment_id not between", value1, value2, "paymentId");
			return (Criteria) this;
		}

		public Criteria andCardIdIsNull() {
			addCriterion("card_id is null");
			return (Criteria) this;
		}

		public Criteria andCardIdIsNotNull() {
			addCriterion("card_id is not null");
			return (Criteria) this;
		}

		public Criteria andCardIdEqualTo(Integer value) {
			addCriterion("card_id =", value, "cardId");
			return (Criteria) this;
		}

		public Criteria andCardIdNotEqualTo(Integer value) {
			addCriterion("card_id <>", value, "cardId");
			return (Criteria) this;
		}

		public Criteria andCardIdGreaterThan(Integer value) {
			addCriterion("card_id >", value, "cardId");
			return (Criteria) this;
		}

		public Criteria andCardIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("card_id >=", value, "cardId");
			return (Criteria) this;
		}

		public Criteria andCardIdLessThan(Integer value) {
			addCriterion("card_id <", value, "cardId");
			return (Criteria) this;
		}

		public Criteria andCardIdLessThanOrEqualTo(Integer value) {
			addCriterion("card_id <=", value, "cardId");
			return (Criteria) this;
		}

		public Criteria andCardIdIn(List<Integer> values) {
			addCriterion("card_id in", values, "cardId");
			return (Criteria) this;
		}

		public Criteria andCardIdNotIn(List<Integer> values) {
			addCriterion("card_id not in", values, "cardId");
			return (Criteria) this;
		}

		public Criteria andCardIdBetween(Integer value1, Integer value2) {
			addCriterion("card_id between", value1, value2, "cardId");
			return (Criteria) this;
		}

		public Criteria andCardIdNotBetween(Integer value1, Integer value2) {
			addCriterion("card_id not between", value1, value2, "cardId");
			return (Criteria) this;
		}

		public Criteria andOrderIdIsNull() {
			addCriterion("order_id is null");
			return (Criteria) this;
		}

		public Criteria andOrderIdIsNotNull() {
			addCriterion("order_id is not null");
			return (Criteria) this;
		}

		public Criteria andOrderIdEqualTo(Integer value) {
			addCriterion("order_id =", value, "orderId");
			return (Criteria) this;
		}

		public Criteria andOrderIdNotEqualTo(Integer value) {
			addCriterion("order_id <>", value, "orderId");
			return (Criteria) this;
		}

		public Criteria andOrderIdGreaterThan(Integer value) {
			addCriterion("order_id >", value, "orderId");
			return (Criteria) this;
		}

		public Criteria andOrderIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("order_id >=", value, "orderId");
			return (Criteria) this;
		}

		public Criteria andOrderIdLessThan(Integer value) {
			addCriterion("order_id <", value, "orderId");
			return (Criteria) this;
		}

		public Criteria andOrderIdLessThanOrEqualTo(Integer value) {
			addCriterion("order_id <=", value, "orderId");
			return (Criteria) this;
		}

		public Criteria andOrderIdIn(List<Integer> values) {
			addCriterion("order_id in", values, "orderId");
			return (Criteria) this;
		}

		public Criteria andOrderIdNotIn(List<Integer> values) {
			addCriterion("order_id not in", values, "orderId");
			return (Criteria) this;
		}

		public Criteria andOrderIdBetween(Integer value1, Integer value2) {
			addCriterion("order_id between", value1, value2, "orderId");
			return (Criteria) this;
		}

		public Criteria andOrderIdNotBetween(Integer value1, Integer value2) {
			addCriterion("order_id not between", value1, value2, "orderId");
			return (Criteria) this;
		}

		public Criteria andPaymentDateIsNull() {
			addCriterion("payment_date is null");
			return (Criteria) this;
		}

		public Criteria andPaymentDateIsNotNull() {
			addCriterion("payment_date is not null");
			return (Criteria) this;
		}

		public Criteria andPaymentDateEqualTo(Date value) {
			addCriterionForJDBCDate("payment_date =", value, "paymentDate");
			return (Criteria) this;
		}

		public Criteria andPaymentDateNotEqualTo(Date value) {
			addCriterionForJDBCDate("payment_date <>", value, "paymentDate");
			return (Criteria) this;
		}

		public Criteria andPaymentDateGreaterThan(Date value) {
			addCriterionForJDBCDate("payment_date >", value, "paymentDate");
			return (Criteria) this;
		}

		public Criteria andPaymentDateGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("payment_date >=", value, "paymentDate");
			return (Criteria) this;
		}

		public Criteria andPaymentDateLessThan(Date value) {
			addCriterionForJDBCDate("payment_date <", value, "paymentDate");
			return (Criteria) this;
		}

		public Criteria andPaymentDateLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("payment_date <=", value, "paymentDate");
			return (Criteria) this;
		}

		public Criteria andPaymentDateIn(List<Date> values) {
			addCriterionForJDBCDate("payment_date in", values, "paymentDate");
			return (Criteria) this;
		}

		public Criteria andPaymentDateNotIn(List<Date> values) {
			addCriterionForJDBCDate("payment_date not in", values, "paymentDate");
			return (Criteria) this;
		}

		public Criteria andPaymentDateBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("payment_date between", value1, value2, "paymentDate");
			return (Criteria) this;
		}

		public Criteria andPaymentDateNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("payment_date not between", value1, value2, "paymentDate");
			return (Criteria) this;
		}
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table payment
	 * @mbg.generated  Mon Feb 26 10:47:49 EST 2018
	 */
	public static class Criterion {
		private String condition;
		private Object value;
		private Object secondValue;
		private boolean noValue;
		private boolean singleValue;
		private boolean betweenValue;
		private boolean listValue;
		private String typeHandler;

		public String getCondition() {
			return condition;
		}

		public Object getValue() {
			return value;
		}

		public Object getSecondValue() {
			return secondValue;
		}

		public boolean isNoValue() {
			return noValue;
		}

		public boolean isSingleValue() {
			return singleValue;
		}

		public boolean isBetweenValue() {
			return betweenValue;
		}

		public boolean isListValue() {
			return listValue;
		}

		public String getTypeHandler() {
			return typeHandler;
		}

		protected Criterion(String condition) {
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
		}

		protected Criterion(String condition, Object value, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>) {
				this.listValue = true;
			} else {
				this.singleValue = true;
			}
		}

		protected Criterion(String condition, Object value) {
			this(condition, value, null);
		}

		protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
		}

		protected Criterion(String condition, Object value, Object secondValue) {
			this(condition, value, secondValue, null);
		}
	}

	/**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table payment
     *
     * @mbg.generated do_not_delete_during_merge Sun Jan 28 18:44:57 EST 2018
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }
}